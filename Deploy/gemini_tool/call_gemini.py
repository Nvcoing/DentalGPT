import os
import google.generativeai as genai
# from dotenv import load_dotenv

# Load API key t·ª´ file .env (ch·ªâ load 1 l·∫ßn khi import)
# load_dotenv()
# API_KEY = os.getenv("GOOGLE_API_KEY")
API_KEY="AIzaSyDGA68vEoOeUV2ejZ2Epw83i89nK8wgzPo"
if not API_KEY:
    raise ValueError("GOOGLE_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong file .env")

# C·∫•u h√¨nh Gemini
genai.configure(api_key=API_KEY)

def call_gemini(prompt: str, model_name: str = "models/gemini-1.5-flash-latest") -> str:
    """
    H√†m g·ªçi Gemini API v·ªõi prompt v√† model c·ª• th·ªÉ.
    Tr·∫£ v·ªÅ ph·∫£n h·ªìi d·∫°ng chu·ªói.
    """
    try:
        model = genai.GenerativeModel(model_name=model_name)
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"L·ªói: {e}"


# N·∫øu ch·∫°y tr·ª±c ti·∫øp t·ª´ d√≤ng l·ªánh
if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Tool g·ªçi Gemini t·ª´ prompt.")
    parser.add_argument("--prompt", required=True, help="N·ªôi dung prompt g·ª≠i t·ªõi Gemini.")
    parser.add_argument("--model", default="models/gemini-1.5-flash-latest", help="T√™n model Gemini.")

    args = parser.parse_args()

    result = call_gemini(args.prompt, args.model)
    print("üì§ Prompt:", args.prompt)
    print("üì• Gemini tr·∫£ l·ªùi:\n", result)
# from gemini_tool.call_gemini import call_gemini

# response = call_gemini("T√≥m t·∫Øt m√¥ h√¨nh CNN l√† g√¨?", model_name="models/gemini-1.5-pro-latest")
# print(response)
