# router_format.py

def detect_file_type(query: str) -> str | None:
    """
    Ph√¢n t√≠ch truy v·∫•n ƒë·ªÉ x√°c ƒë·ªãnh ƒë·ªãnh d·∫°ng file c·∫ßn t√¨m.
    Tr·∫£ v·ªÅ: pdf, docx, jpg, mp4,... ho·∫∑c None n·∫øu kh√¥ng c√≥ ƒëu√¥i r√µ r√†ng.
    """
    query = query.lower()
    keywords = {
    # üìÑ T√†i li·ªáu vƒÉn b·∫£n
    "pdf": ["pdf", "t√†i li·ªáu pdf", "t·∫≠p tin pdf",],
    "doc": ["word", "doc", "docx", "t√†i li·ªáu word", "vƒÉn b·∫£n word", "file doc", "t·ªáp docx"],
    "odt": ["odt", "open document", "vƒÉn b·∫£n odt"],
    "rtf": ["rtf", "t√†i li·ªáu rtf"],
    "txt": ["text", "txt", "text file", "file vƒÉn b·∫£n", "ghi ch√∫", "note", "t·ªáp txt"],
    "md": ["markdown", "md", "file markdown"],

    # üìä B·∫£ng t√≠nh
    "xls": ["xls", "excel 2003", "file b·∫£ng t√≠nh c≈©"],
    "xlsx": ["xlsx", "excel", "sheet", "spreadsheet", "b·∫£ng t√≠nh", "file excel", "t·ªáp excel"],
    "csv": ["csv", "comma separated", "b·∫£ng d·ªØ li·ªáu", "d·ªØ li·ªáu th√¥", "file csv", "t·ªáp csv"],
    "ods": ["ods", "open spreadsheet", "b·∫£ng t√≠nh ods"],

    # üñºÔ∏è H√¨nh ·∫£nh
    "jpg": ["jpg", "jpeg", "·∫£nh", "image", "h√¨nh ·∫£nh", "file jpg", "t·ªáp ·∫£nh"],
    "png": ["png", "·∫£nh png", "h√¨nh ·∫£nh png"],
    "gif": ["gif", "·∫£nh ƒë·ªông", "·∫£nh gif"],
    "bmp": ["bmp", "bitmap"],
    "svg": ["svg", "·∫£nh vector", "vector image"],
    "tiff": ["tiff"],
    "webp": ["webp"],

    # üéûÔ∏è Video
    "mp4": ["mp4", "video", "clip", "phim", "file mp4", "t·ªáp video", "xem video"],
    "avi": ["avi", "video avi"],
    "mov": ["mov"],
    "wmv": ["wmv"],
    "flv": ["flv"],
    "mkv": ["mkv"],
    "webm": ["webm"],

    # üîä √Çm thanh
    "mp3": ["mp3", "audio", "nh·∫°c", "b√†i h√°t", "√¢m thanh", "nghe nh·∫°c", "file mp3"],
    "wav": ["wav", "√¢m thanh wav"],
    "aac": ["aac"],
    "ogg": ["ogg"],
    "flac": ["flac"],
    "m4a": ["m4a"],

    # üìΩÔ∏è Slide thuy·∫øt tr√¨nh
    "ppt": ["ppt", "powerpoint", "slide", "b√†i gi·∫£ng", "thuy·∫øt tr√¨nh", "b·∫£n tr√¨nh chi·∫øu"],
    "pptx": ["pptx", "powerpoint m·ªõi"],
    "odp": ["odp", "open presentation", "tr√¨nh chi·∫øu odp"],

    # üóúÔ∏è File n√©n
    "zip": ["zip", "compressed file", "file n√©n", "n√©n zip", "t·ªáp zip"],
    "rar": ["rar", "file rar", "gi·∫£i n√©n rar"],
    "7z": ["7z", "7zip"],
    "tar": ["tar", "file tar"],
    "gz": ["gz", "gzip", "file gz"],

    # üíª M√£ ngu·ªìn
    "py": ["python", ".py", "source code python", "m√£ python", "code python"],
    "java": ["java", ".java", "source code java"],
    "cpp": ["cpp", "c++", ".cpp", "m√£ c++", "code cpp"],
    "c": ["c", ".c", "source code c"],
    "js": ["javascript", ".js", "m√£ js"],
    "html": ["html", "web page", "trang web"],
    "css": ["css", "file css"],

    # üóÉÔ∏è C·∫•u tr√∫c d·ªØ li·ªáu & metadata
    "json": ["json", "data file", "c·∫•u tr√∫c d·ªØ li·ªáu", "file json"],
    "xml": ["xml", "file xml", "d·ªØ li·ªáu xml"],
    "yaml": ["yaml", "yml", "file yaml"],
    "log": ["log", "nh·∫≠t k√Ω h·ªá th·ªëng", "file log"]
}


    for file_type, kw_list in keywords.items():
        for keyword in kw_list:
            if keyword in query:
                return file_type
    return None
